@inherits ModalBase

<Modal @ref="Modal" Title="Settings" OnShowing="onShowingAsync" Size="ModalSize.Large">
    <BodyTemplate>
        <div>    
            <table class="settingsTable">
                <tr>
                    <td>Image folder!</td>
                    <td>
                        <InputText @bind-Value="@_config.ImageFolder" style="width: 26rem"/>
                        <ErrorText @ref=@(_errorTexts["imageFolder"])></ErrorText>
                    </td>
                </tr>
                <tr>
                    <td>Set fujifilm recipe onclick import</td>
                    <td><InputCheckbox @bind-Value="_config.SetFujiFilmRecipe.Enabled"/></td>
                </tr>            
                <tr>
                    <td class="@(_config.SetFujiFilmRecipe.Enabled ? "" : "disabled")">Google sheets api key</td>
                    <td><InputText @bind-Value="_config.SetFujiFilmRecipe.ApiKey" disabled="@(!_config.SetFujiFilmRecipe.Enabled)" style="width: 26rem"/></td>
                </tr>            
                <tr>
                    <td class="@(_config.SetFujiFilmRecipe.Enabled ? "" : "disabled")">Google sheets spreadsheet id</td>
                    <td><InputText @bind-Value="_config.SetFujiFilmRecipe.SpreadsheetId" disabled="@(!_config.SetFujiFilmRecipe.Enabled)"  style="width: 26rem"/></td>
                </tr>            
                <tr>
                    <td>Use google photos</td>
                    <td><InputCheckbox @bind-Value="_config.GooglePhotosConfig.Enabled"/></td>
                </tr>
            </table>
        </div>
        <div class="footer">
            <Button Color="ButtonColor.Primary" @onclick="save">OK</Button>&nbsp;&nbsp;
            <Button Color="ButtonColor.Secondary" Outline="true" @onclick="close">Cancel</Button>
        </div>
    </BodyTemplate>
</Modal>

@code {

    [Inject]
    DataAccessService? dataAccessService {get ;set;}

    [Inject]
    ModalsService? modalsService {get ;set;}

    [Inject]
    ImageLibraryService? imageLibraryService {get ;set;}

    public Settings() {
        _errorTexts.Add("imageFolder",null);
    }
    protected override void OnInitialized() {
        if ( modalsService!=null) {
            modalsService.Register(this,ModalDialog.Settings);
        } else {
            Console.WriteLine("null modalsService");
        }
    }

    private ConfigBase _config = new ConfigBase();

    private async Task close()
    {
        await Modal!.HideAsync();
    }

    private async Task onShowingAsync() {
        if ( dataAccessService!=null ) {
            _config = await dataAccessService.GetConfigAsync();
        }

    }

    private async Task save() {  
        if ( dataAccessService!=null ) {
            var mess = await dataAccessService.SetConfigAsync(_config);
            if ( (int) mess.StatusCode == 422) {
                var errors = await mess.Content.ReadFromJsonAsync<Dictionary<string,string>>();
                if ( errors!=null ) {
                    UpdateErrors(errors);
                }
            } else if ( mess.IsSuccessStatusCode && imageLibraryService!=null ) {
                //
                await close();
                await imageLibraryService.ReloadAsync();
            } else {
                Console.WriteLine($"Statuscode = [{mess.StatusCode}]");
            }
        }

    }
}
