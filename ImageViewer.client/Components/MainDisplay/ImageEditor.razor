@using System.Diagnostics
<div class="imageEditorContainer">
    <div class="imageEditorInnerContainer">
        <div class="imageEditorToolbar">
            <ImageButton Tooltip="Back" OnClick="close">
                <Icon Name="IconName.ArrowLeftCircle"></Icon>
            </ImageButton>
            <div class="toolbarSeparator"></div>
            <ImageButton OnClick="rotateClockwiseAsync" Tooltip="Rotate 90 deg. clockwise">
                <Icon Name="IconName.ArrowClockwise"></Icon>
            </ImageButton>
            <ImageButton OnClick="rotateAntiClockwiseAsync" Tooltip="Rotate 90 deg. anti-clockwise">
                <Icon Name="IconName.ArrowCounterclockwise"></Icon>
            </ImageButton>
            <ImageButton Tooltip="Edit external editor" OnClick="openExternalEditorAsync">
                <Icon Name="IconName.Pencil"></Icon>
            </ImageButton>
            <ImageButton Tooltip="Delete" OnClick="deleteAsync">
                <Icon Name="IconName.Trash"></Icon>
            </ImageButton>
            <ImageButton Tooltip="Upload to Google photos">
                <Icon Name="IconName.CloudUpload"></Icon>
            </ImageButton>
        </div>
        <div class="mainImageContainer">
            <div class="mainImageButton">
                <ImageButton Tooltip="Prev image">
                    <Icon Name="IconName.ChevronLeft" @onclick="loadPrev" />
                </ImageButton>
            </div>
            <img class="mainImage @(_loadingImage ? "loading" : "loaded" ) @(_working ? "working" : "" )" src="@getImageUrl()"  @onload="imageLoadedAsync"/>
            <div class="mainImageButton">
                <ImageButton Tooltip="Next image">
                    <Icon Name="IconName.ChevronRight" @onclick="loadNext" />
                </ImageButton>
            </div>
        </div>
    </div>
</div>

@code {

    [Inject]
    ImageLibraryService? imageLibraryService { get; set; }

    [Inject]
    MainDisplayService? mainDisplayService { get; set; }

    [Inject]
    DataAccessService? dataAccessService { get; set; }

    bool _loadingImage = false, _working = false;

    ImageInfo? _selectedImage = null;

    int _imageCounter=0;

    protected override void OnInitialized()
    {
        if (imageLibraryService != null)
        {
            imageLibraryService.NewImageSelected += (e, selectedImage) =>
            {
                if ( _selectedImage==null || _selectedImage.Id != selectedImage.Id ) {
                    _selectedImage = selectedImage;
                    _loadingImage = true;
                    StateHasChanged();
                }
            };
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {

    }

    private void close()
    {
        mainDisplayService?.SetShowState(MainDisplayService.ShowStateEnum.Thumbnails);
    }

    private string getImageUrl()
    {
        if (imageLibraryService != null && imageLibraryService.SelectedImage != null && dataAccessService != null)
        {
            var id = imageLibraryService.SelectedImage.Id;
            var encodedId = System.Net.WebUtility.UrlEncode(id);
            var url = $"{dataAccessService.BaseAddress}ImageLibrary/Image?id={encodedId}&counter={_imageCounter}";
            return url;
        }
        else
        {
            return "";
        }
    }

    private void loadPrev()
    {
        if (imageLibraryService != null)
        {
            imageLibraryService.SelectPrevImage();
        }
    }

    private void loadNext()
    {
        if (imageLibraryService != null)
        {
            imageLibraryService.SelectNextImage();
        }
    }

    private async Task imageLoadedAsync() {
        await Task.Delay(200);
        _loadingImage = false;
        _working = false;
        StateHasChanged();
    }

    private async Task rotateClockwiseAsync() {
        if ( _selectedImage!=null) {
            _working = true;
            await dataAccessService!.RotateClockwiseAsync(_selectedImage.Id);
            imageLibraryService?.SelectedImageEdited();
            _imageCounter++;
            StateHasChanged();
        }
    }

    private async Task rotateAntiClockwiseAsync() {
        if ( _selectedImage!=null) {
            _working = true;
            await dataAccessService!.RotateAntiClockwiseAsync(_selectedImage.Id);
            imageLibraryService?.SelectedImageEdited();
            _imageCounter++;
            StateHasChanged();
        }
    }

    private async Task deleteAsync() {
        if ( _selectedImage!=null) {
            _working = true;
            await dataAccessService!.DeleteAsync(_selectedImage.Id);
            await imageLibraryService!.ReloadMonthAsync();
            _working = false;
            if ( imageLibraryService?.ImagesByDateList?.Count==0 ) {
                // means there's no more left in this month so reload the months and go back to thumbnail
                await imageLibraryService.LoadMonthsByYearAsync();
            } else {
                // select the next image
                imageLibraryService?.ReSelectImage();
            }
        }
    }

    private async Task openExternalEditorAsync() {
        if ( dataAccessService!=null && _selectedImage!=null ) {
            await dataAccessService.OpenInEditorAsync(_selectedImage.Id);
        }
    }
}
